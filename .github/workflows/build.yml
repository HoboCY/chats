name: Build
on:
  push:
    branches:
      - main
      - dev
      - feature/**
    paths:
      - 'src/BE/**'
      - 'src/FE/**'
      - .github/workflows/build.yml
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-fe:
    runs-on: ubuntu-22.04
    outputs:
      is_release: ${{ github.ref_name == 'main' && 'true' || 'false' }}
      full_ver: ${{ steps.get_version.outputs.full_ver }}
      patch_full_ver: ${{ steps.get_version.outputs.patch_full_ver }}
      minor_full_ver: ${{ steps.get_version.outputs.minor_full_ver }}
      major_ver: ${{ steps.get_version.outputs.major_ver }}
      msbuild_args: ${{ steps.get_version.outputs.msbuild_args }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Cache FE build output
        id: fe_build_cache
        uses: actions/cache@v4
        with:
          path: ./src/FE/out
          key: ${{ runner.os }}-fe-build-${{ hashFiles('src/FE/**/*.json', 'src/FE/**/*.tsx', 'src/FE/**/*.ts', 'src/FE/**/*.svg', 'src/FE/**/*.png', 'src/FE/**/*.css') }}
          
      - name: Cache node_modules
        id: node_modules_cache
        if: steps.fe_build_cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ./src/FE/node_modules
          key: ${{ runner.os }}-fe-node_modules-${{ hashFiles('src/FE/package-lock.json') }}
          
      - name: Install npm dependencies
        if: steps.fe_build_cache.outputs.cache-hit != 'true' && steps.node_modules_cache.outputs.cache-hit != 'true'
        working-directory: ./src/FE
        run: npm i
        
      - name: Build frontend
        if: steps.fe_build_cache.outputs.cache-hit != 'true'
        working-directory: ./src/FE
        run: npm run build

      - name: Get Version
        id: get_version
        run: |
          cd ./src/BE
          ver=$(grep -oPm1 "(?<=<Version>)[^<]+" Chats.BE.csproj) # 1.0.0
          minor_ver=$(echo $ver | cut -d '.' -f 1-2) # 1.0
          major_ver=$(echo $ver | cut -d '.' -f 1) # 1
          full_ver=${ver}.${{ github.run_number }} # 1.0.0.587
          
          echo "full_ver=${full_ver}" >> $GITHUB_OUTPUT
          echo "patch_full_ver=${ver}" >> $GITHUB_OUTPUT
          echo "minor_full_ver=${minor_ver}" >> $GITHUB_OUTPUT
          echo "major_ver=${major_ver}" >> $GITHUB_OUTPUT
          echo "msbuild_args=/p:Version=${full_ver} /p:AssemblyVersion=${full_ver} /p:FileVersion=${full_ver} /p:InformationalVersion=${full_ver}" >> $GITHUB_OUTPUT

      - name: Copy FE build artifacts
        run: |
          mkdir -p ./src/BE/wwwroot
          cp -r ./src/FE/out/* ./src/BE/wwwroot
        
      - name: Upload FE build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: chats-fe
          path: ./src/FE/out

      - name: Upload BE src folder
        uses: actions/upload-artifact@v4
        with:
          name: be-src
          path: |
            ./src/BE

  upload-fe-to-minio:
    needs: build-fe
    runs-on: ubuntu-22.04
    steps:
      - name: Trigger Sync chats-fe & be-src
        run: |
          curl -s -X POST "https://chats-release-webhook.starworks.cc:88/sync/${{ github.run_id }}/chats-fe/async" -N \
            -H "Authorization: Basic $(echo -n "${{ secrets.CHATS_RELEASE_WEBHOOK_CREDENTIAL }}" | openssl base64)"
          curl -s -X POST "https://chats-release-webhook.starworks.cc:88/sync/${{ github.run_id }}/be-src/async" -N \
            -H "Authorization: Basic $(echo -n "${{ secrets.CHATS_RELEASE_WEBHOOK_CREDENTIAL }}" | openssl base64)"

  build-primary-container:
    needs: build-fe
    runs-on: ubuntu-22.04
    steps:
      - name: Login container
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ vars.DOCKER_USERNAME }} ${{ vars.DOCKER_REGISTRY }} --password-stdin

      - name: Download BE src folder
        uses: actions/download-artifact@v4
        with:
          name: be-src
          path: ./be-src

      - name: Build container
        run: |
          dotnet publish ./be-src/Chats.BE.csproj -c Release --os linux --arch x64 /t:PublishContainer /p:ContainerRepository=chats ${{ needs.build-fe.outputs.msbuild_args }}

      - name: Tag container with run number
        run: |
          docker tag chats ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:${{ needs.build-fe.outputs.full_ver }}-linux-x64
          
      - name: Push container
        run: |
          docker push ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:${{ needs.build-fe.outputs.full_ver }}-linux-x64

  build-containers:
    if: needs.build-fe.outputs.is_release == 'true'
    needs: build-fe
    strategy:
      matrix:
        include:
          - tag: nanoserver-1809
            runs-on: windows-latest
            os: win
            arch: x64
            args: /p:ContainerBaseImage=mcr.microsoft.com/dotnet/aspnet:8.0-nanoserver-1809
          - tag: nanoserver-ltsc2022
            runs-on: windows-latest
            os: win
            arch: x64
            args: /p:ContainerBaseImage=mcr.microsoft.com/dotnet/aspnet:8.0-nanoserver-ltsc2022
          - tag: nanoserver-ltsc2025
            runs-on: windows-latest
            os: win
            arch: x64
            args: /p:ContainerBaseImage=mcr.microsoft.com/dotnet/aspnet:8.0-nanoserver-ltsc2025
          - tag: linux-arm64
            runs-on: ubuntu-22.04
            os: linux
            arch: arm64
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Login container
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ vars.DOCKER_USERNAME }} ${{ vars.DOCKER_REGISTRY }} --password-stdin

      - name: Download BE src folder
        uses: actions/download-artifact@v4
        with:
          name: be-src
          path: ./be-src

      - name: Build container
        run: |
          dotnet publish ./be-src/Chats.BE.csproj -c Release --os ${{ matrix.os }} --arch ${{ matrix.arch }} /t:PublishContainer /p:ContainerRepository=chats ${{ needs.build-fe.outputs.msbuild_args }} ${{ matrix.args }}

      - name: Tag container with run number
        run: |
          docker tag chats ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:${{ needs.build-fe.outputs.full_ver }}-${{ matrix.tag }}
          
      - name: Push container
        run: |
          docker push ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:${{ needs.build-fe.outputs.full_ver }}-${{ matrix.tag }}

  docker-manifest:
    needs: [build-primary-container, build-containers, build-fe]
    runs-on: ubuntu-22.04
    steps:
      - name: Login container
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ vars.DOCKER_USERNAME }} ${{ vars.DOCKER_REGISTRY }} --password-stdin
        
      - name: Create and push multiple manifests
        run: |
          TAGS=("r-${{ github.run_number }}"
                "${{ needs.build-fe.outputs.full_ver }}"
                "${{ needs.build-fe.outputs.patch_full_ver }}"
                "${{ needs.build-fe.outputs.minor_full_ver }}"
                "${{ needs.build-fe.outputs.major_ver }}"
                "latest")

          for TAG in "${TAGS[@]}"; do
            echo "::group::Creating manifest for tag: $TAG"
            
            docker manifest create --amend ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:"$TAG" \
              ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:${{ needs.build-fe.outputs.full_ver }}-linux-x64 \
              ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:${{ needs.build-fe.outputs.full_ver }}-linux-arm64 \
              ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:${{ needs.build-fe.outputs.full_ver }}-nanoserver-1809 \
              ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:${{ needs.build-fe.outputs.full_ver }}-nanoserver-ltsc2022 \
              ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:${{ needs.build-fe.outputs.full_ver }}-nanoserver-ltsc2025
              
            docker manifest annotate ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:"$TAG" \
              ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:${{ needs.build-fe.outputs.full_ver }}-nanoserver-1809 \
              --os-version 10.0.17763.6532

            docker manifest annotate ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:"$TAG" \
              ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:${{ needs.build-fe.outputs.full_ver }}-nanoserver-ltsc2022 \
              --os-version 10.0.20348.2849

            docker manifest annotate ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:"$TAG" \
              ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:${{ needs.build-fe.outputs.full_ver }}-nanoserver-ltsc2025 \
              --os-version 10.0.26100.3194
              
            docker manifest inspect ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:"$TAG"
            
            docker manifest push ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:"$TAG"

            echo "::endgroup::"
          done

  build-binaries:
    needs: build-fe
    strategy:
      matrix:
        include:
          - id: chats
          - id: chats-win-x64
            args: -r win-x64 --self-contained true /p:PublishReadyToRun=false /p:PublishSingleFile=false
          - id: chats-linux-x64
            args: -r linux-x64 --self-contained true /p:PublishReadyToRun=false /p:PublishSingleFile=false
          - id: chats-linux-arm64
            args: -r linux-arm64 --self-contained true /p:PublishReadyToRun=false /p:PublishSingleFile=false
          - id: chats-linux-musl-x64
            args: -r linux-musl-x64 --self-contained true /p:PublishReadyToRun=false /p:PublishSingleFile=false
          - id: chats-linux-musl-arm64
            args: -r linux-musl-arm64 --self-contained true /p:PublishReadyToRun=false /p:PublishSingleFile=false
          - id: chats-osx-arm64
            args: -r osx-arm64 --self-contained true /p:PublishReadyToRun=false /p:PublishSingleFile=false
          - id: chats-osx-x64
            args: -r osx-x64 --self-contained true /p:PublishReadyToRun=false /p:PublishSingleFile=false
    if: needs.build-fe.outputs.is_release == 'true'
    runs-on: ubuntu-22.04
    steps:
      - name: Download BE src folder
        uses: actions/download-artifact@v4
        with:
          name: be-src
          path: ./be-src
      - name: build binary
        run: |
          dotnet publish ./be-src/Chats.BE.csproj -c Release -o ./Publish ${{ matrix.args }} ${{ needs.build-fe.outputs.msbuild_args }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.id }}
          path: ./Publish
      - name: Upload to Minio
        run: |
          curl -s -i -X POST "https://chats-release-webhook.starworks.cc:88/sync/${{ github.run_id }}/${{ matrix.id }}" -N \
            -H "Authorization: Basic $(echo -n "${{ secrets.CHATS_RELEASE_WEBHOOK_CREDENTIAL }}" | openssl base64)"

  build-binaries-non-release:
    needs: build-fe
    strategy:
      matrix:
        include:
          - id: chats
    if: needs.build-fe.outputs.is_release == 'false'
    runs-on: ubuntu-22.04
    steps:
      - name: Download BE src folder
        uses: actions/download-artifact@v4
        with:
          name: be-src
          path: ./be-src
      - name: build binary
        run: |
          dotnet publish ./be-src/Chats.BE.csproj -c Release -o ./Publish ${{ matrix.args }} /p:DeleteExistingFiles=True ${{ needs.build-fe.outputs.msbuild_args }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.id }}
          path: ./Publish
      - name: Upload to Minio
        run: |
          curl -s -i -X POST "https://chats-release-webhook.starworks.cc:88/sync/${{ github.run_id }}/${{ matrix.id }}" -N \
            -H "Authorization: Basic $(echo -n "${{ secrets.CHATS_RELEASE_WEBHOOK_CREDENTIAL }}" | openssl base64)"

  create-release:
    if: github.ref_name == 'main'
    needs: [build-binaries, build-primary-container, build-fe]
    runs-on: ubuntu-22.04
    outputs:
      release_id: ${{ steps.create_release.outputs.release_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts as zip
        run: |   
          API_URL="https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"
          echo "Fetching artifacts from: ${API_URL}"
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "${API_URL}" | \
            jq -c '.artifacts[]' | while read artifact; do
              ID=$(echo "$artifact" | jq -r '.id')
              NAME=$(echo "$artifact" | jq -r '.name')
              echo "Downloading artifact '${NAME}' (ID: ${ID})"
              curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -o "${NAME}.zip" "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${ID}/zip?archive_format=zip"
            done
          ls -lh *.zip

      - name: sha256sum
        run: |
          sha256sum *.zip > sha256sum.txt

      - name: Get changes
        run: |
          CURRENT_REV=$(git rev-parse HEAD)
          PREVIOUS_REV=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r ".tag_name")
          cat <<END >> RELEASE.md
          <details>
    
          ### Docker
          | Description                   | Docker Image                                                                                                                    |
          | ----------------------------- | ------------------------------------------------------------------------------------------------------------------------------- |
          | r${{ github.run_number }}     | ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:${{ needs.build-fe.outputs.full_ver }}-linux-x64                 |
          | Linux x64                     | ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:${{ needs.build-fe.outputs.full_ver }}-linux-x64                 |
          | Linux ARM64                   | ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:${{ needs.build-fe.outputs.full_ver }}-linux-arm64               |
          | Windows Nano Server 1809      | ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:${{ needs.build-fe.outputs.full_ver }}-nanoserver-1809           |
          | Windows Nano Server LTSC 2022 | ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:${{ needs.build-fe.outputs.full_ver }}-nanoserver-ltsc2022       |
          | Windows Nano Server LTSC 2025 | ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:${{ needs.build-fe.outputs.full_ver }}-nanoserver-ltsc2025       |
          | Latest                        | ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:latest                                                           |
    
          ### Alternative binaries download links that may faster than GitHub(for China users)
          | Artifact                  | Download Link                                                                   |
          | ------------------------- | ------------------------------------------------------------------------------- |
          | chats-win-x64.zip         | ${{ vars.MINIO_URL }}/chats/r${{ github.run_number }}/chats-win-x64.zip         |
          | chats-linux-x64.zip       | ${{ vars.MINIO_URL }}/chats/r${{ github.run_number }}/chats-linux-x64.zip       |
          | chats-linux-arm64.zip     | ${{ vars.MINIO_URL }}/chats/r${{ github.run_number }}/chats-linux-arm64.zip     |
          | chats-linux-musl-x64.zip  | ${{ vars.MINIO_URL }}/chats/r${{ github.run_number }}/chats-linux-musl-x64.zip  |
          | chats-linux-musl-arm64.zip| ${{ vars.MINIO_URL }}/chats/r${{ github.run_number }}/chats-linux-musl-arm64.zip|
          | chats-osx-arm64.zip       | ${{ vars.MINIO_URL }}/chats/r${{ github.run_number }}/chats-osx-arm64.zip       |
          | chats-osx-x64.zip         | ${{ vars.MINIO_URL }}/chats/r${{ github.run_number }}/chats-osx-x64.zip         |
          | chats-fe.zip              | ${{ vars.MINIO_URL }}/chats/r${{ github.run_number }}/chats-fe.zip              |
          | chats.zip                 | ${{ vars.MINIO_URL }}/chats/r${{ github.run_number }}/chats.zip                 |
          | be-src.zip                | ${{ vars.MINIO_URL }}/chats/r${{ github.run_number }}/be-src.zip                |
    
          **NOTE**: 
          Replace \`r${{ github.run_number }}\` with \`latest\` in the download link to get the latest version, for example: \`${{ vars.MINIO_URL }}/chats/latest/chats-win-x64.zip\`

          ### Full Changelogs
          https://github.com/sdcb/chats/compare/$PREVIOUS_REV...$CURRENT_REV

          Commits between \`$PREVIOUS_REV\` and \`$CURRENT_REV\`:
          END
          
          git log ${PREVIOUS_REV}..${CURRENT_REV} --pretty=format:'* [%s](https://github.com/${{ github.repository }}/commit/%H)' >> RELEASE.md
          
          cat <<END >> RELEASE.md
          </details>
          END

      - name: Publish Release
        uses: ncipollo/release-action@v1
        with:
          bodyFile: RELEASE.md
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ needs.build-fe.outputs.patch_full_ver }}
          tag: ${{ needs.build-fe.outputs.full_ver }}
          artifacts: "*.zip, sha256sum.txt"

  upload-minio-latest:
    if: needs.build-fe.outputs.is_release == 'true'
    needs: [build-binaries, upload-fe-to-minio]
    runs-on: ubuntu-22.04
    steps:
      - name: Update latest files
        run: |
          curl -X POST "https://chats-release-webhook.starworks.cc:88/sync/latest/${{ github.run_number }}" -N \
            -H "Authorization: Basic $(echo -n "${{ secrets.CHATS_RELEASE_WEBHOOK_CREDENTIAL }}" | openssl base64)"
      
  deploy:
    runs-on: host7-runner
    needs: [build-primary-container, build-fe]
    steps:
      - run: |
          docker pull ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/chats:${{ needs.build-fe.outputs.full_ver }}-linux-x64
          cd /home/zhoujie/chats
              
          if [[ "${{ github.ref_name }}" == feature/* ]]; then
              echo "Deploying feature environment: ${{ github.ref_name }}"
              sed -i "s/^TAG=.*/TAG=${{ needs.build-fe.outputs.full_ver }}-linux-x64/" ./feature.env
              docker compose --env-file=./feature.env --project-name chats-feature up -d --remove-orphans
          elif [[ "${{ github.ref_name }}" == "dev" ]]; then
              echo "Deploying dev/stg environment: ${{ github.ref_name }}"
              sed -i "s/^TAG=.*/TAG=${{ needs.build-fe.outputs.full_ver }}-linux-x64/" ./dev.env
              sed -i "s/^TAG=.*/TAG=${{ needs.build-fe.outputs.full_ver }}-linux-x64/" ./stg.env
              docker compose --env-file=./dev.env --project-name chats-dev up -d --remove-orphans
              docker compose --env-file=./stg.env --project-name chats-stg up -d --remove-orphans
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
              echo "Deploying production environment: ${{ github.ref_name }}"
              sed -i "s/^TAG=.*/TAG=${{ needs.build-fe.outputs.full_ver }}-linux-x64/" ./prod.env
              docker compose --env-file=./prod.env --project-name chats-prod up -d --remove-orphans
          fi